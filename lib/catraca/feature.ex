defmodule Catraca.Feature do
  use Ecto.Schema

  @derive {Jason.Encoder, only: [:key, :rule]}

  @primary_key {:key, :string, autogenerated: false}
  @enforce_keys [:key, :rule]
  schema "feature" do
    field(:rule, :map)
    field(:active, :boolean)
  end

  def changeset(feature, params \\ %{}) do
    feature
    |> Ecto.Changeset.cast(params, [:rule])
    |> Ecto.Changeset.validate_required([:rule])
  end

  def enabled?(%Catraca.Feature{:rule => rule}, payload) do
    Catraca.Rule.evaluate(rule, payload)
  end
end
